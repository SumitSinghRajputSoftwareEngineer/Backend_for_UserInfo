server.port = 8080

spring.application.name=user

service.url= https://dummyjson.com/users


spring.datasource.url=jdbc:h2:mem:userbase
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.hibernate.ddl-auto=update

# Swagger Configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

##Implementing resilience4j Bulkhead Configuration (Limits concurrent requests)

#Limits concurrent users to 5
resilience4j.bulkhead.instances.userServiceBulkhead.maxConcurrentCalls=5
#New requests wait 1 second for a free slot.
resilience4j.bulkhead.instances.userServiceBulkhead.maxWaitDuration=1s

##Implementing resilience4j Retry Configuration

#Retries up to 3 times
resilience4j.retry.instances.userServiceRetry.maxAttempts=3
#Waits 2 seconds before retrying
resilience4j.retry.instances.userServiceRetry.waitDuration=2000ms
#Enables increasing wait time on each retry
resilience4j.retry.instances.userServiceRetry.enableExponentialBackoff=true
#Waits 2x longer each time
resilience4j.retry.instances.userServiceRetry.exponentialBackoffMultiplier=2

resilience4j.retry.instances.userServiceRetry.retryExceptions=org.springframework.web.client.RestClientException



###Implementing resilience4j circuit breaker configuration

#If 50% of calls fail, open the circuit.
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.failureRateThreshold=50
#If 50% of calls are slow, consider failing.
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.slowCallRateThreshold=50

resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.slowCallDurationThreshold=2s
#Checks last 10 requests
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.minimumNumberOfCalls=5
#Stays open for 10 seconds before trying again.
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.waitDurationInOpenState=10s
# Allows 2 test calls when recovering.
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.permittedNumberOfCallsInHalfOpenState=2

#enabling actuator
management.endpoints.web.exposure.include=*

#Redis
spring.cache.type=redis
spring.redis.host=localhost
spring.redis.port=6379

